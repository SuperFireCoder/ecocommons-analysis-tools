image: docker:20

services:
  - docker:dind

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  IMAGE_LATEST: ${CI_REGISTRY_IMAGE}:latest
  IMAGE_SHORT_SHA: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}

stages:
  - test
  - sonar
  - build
  - publish

before_script:
  - echo "${CI_JOB_TOKEN}" | docker login -u "${CI_REGISTRY_USER}" "${CI_REGISTRY}" --password-stdin

unit test:
  stage: test
  image: node:12-alpine
  before_script: []
  script:
    - echo -e "@ecocommons-australia:registry=https://gitlab.com/api/v4/packages/npm/\n//gitlab.com/api/v4/packages/npm/:_authToken=${CI_JOB_TOKEN}" > .npmrc
    - npm ci
    - npm test -- --colors --coverage --reporters=default --reporters=jest-junit
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
    reports:
      junit: junit.xml
    paths:
      - coverage/**

sonarqube-check:
  stage: sonar
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  allow_failure: true
  before_script:
    - ls -latr /builds/ecocommons-australia/ecocommons-platform/analysis-tools-ui/coverage/lcov.info
  only:
    - biosecurity-commons # or the name of your main branch
  dependencies:
    - unit test

build image:
  stage: build
  script:
    - echo "building ${IMAGE_SHORT_SHA}"
    - cat ${DOT_ENV_DOT_LOCAL_ECOCOMMONS_DEV} > .env.local
    - docker pull ${IMAGE_SHORT_SHA} || true
    - docker build --tag ${IMAGE_SHORT_SHA} --build-arg NPM_AUTHTOKEN=$CI_JOB_TOKEN --build-arg NODE_ENV=production .
    - docker push ${IMAGE_SHORT_SHA}
  only:
    refs:
      # i.e. || condition
      - master
      - tags

publish latest image:
  stage: publish
  script:
    - echo "publishing ${IMAGE_LATEST}"
    - docker pull ${IMAGE_SHORT_SHA} || true
    - docker tag ${IMAGE_SHORT_SHA} ${IMAGE_LATEST}
    - docker push ${IMAGE_LATEST}
  only:
    refs:
      # i.e. || condition
      - master
      - tags

publish tagged image:
  stage: publish
  script:
    - IMAGE_TAG=${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
    - echo "publishing ${IMAGE_TAG}"
    - docker pull ${IMAGE_SHORT_SHA} || true
    - docker tag ${IMAGE_SHORT_SHA} ${IMAGE_TAG}
    - docker push ${IMAGE_TAG}
  only:
    - tags
